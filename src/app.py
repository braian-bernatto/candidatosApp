# -*- coding: utf-8 -*-
"""SENADORES PANEL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14hzPDDnfqM9AQUq7h51-_IFyN7SntpXy
"""

import csv
import pandas as pd

df = pd.read_csv('VW_PLURINOMINALES-30-04-2023.csv')

# Mapeo de códigos de departamento a nombres
departamento_mapping = {
    0: 'Capital',
    1: 'Concepcion',
    2: 'San Pedro',
    3: 'Cordillera',
    4: 'Guaira',
    5: 'Caaguazu',
    6: 'Caazapa',
    7: 'Itapua',
    8: 'Misiones',
    9: 'Paraguari',
    10: 'Alto Parana',
    11: 'Central',
    12: 'Ñeembucu',
    13: 'Amambay',
    14: 'Canindeyu',
    15: 'Pdte. Hayes',
    16: 'Boqueron',
    17: 'Alto Paraguay',
    18: 'Extranjero'
}

# Reemplaza los valores de CODDEPARTAMENTO con los nombres correspondientes
df['CODDEPARTAMENTO'] = df['CODDEPARTAMENTO'].replace(departamento_mapping)

# Establece un orden personalizado de los departamentos
orden_departamentos = ['Capital', 'Concepcion', 'San Pedro', 'Cordillera', 'Guaira', 'Caaguazu',
                      'Caazapa', 'Itapua', 'Misiones', 'Paraguari', 'Alto Parana', 'Central',
                      'Ñeembucu', 'Amambay', 'Canindeyu', 'Pdte. Hayes', 'Boqueron', 'Alto Paraguay',
                      'Extranjero']  # Agrega los nombres en el orden deseado

df['CODDEPARTAMENTO'] = pd.Categorical(df['CODDEPARTAMENTO'], categories=orden_departamentos, ordered=True)

# FILTRO SENADORES !!!! 
filtro_senadores = df.loc[(df['DESCANDIDATURA'] == 'SENADORES')]
print(filtro_senadores)

import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.graph_objects as go

# Carga los datos desde un archivo CSV o una fuente de datos
df = filtro_senadores  # Reemplaza 'ruta_del_archivo.csv' con la ubicación real del archivo

# Crea la aplicación de Dash
app = dash.Dash(__name__)
server = app.server

# Define el diseño de la aplicación|
app.layout = html.Div([
    html.Div([
        html.Label('Número de lista:'),
        dcc.Dropdown(
            id='numero-lista-dropdown',
            options=[{'label': str(nro_lista), 'value': nro_lista} for nro_lista in df['NRO_LISTA'].unique()],
            value=None
        ),
        html.Label('Orden:'),
        dcc.Dropdown(
            id='orden-dropdown',
            value=None
        ),
    ], style={'width': '50%', 'display': 'inline-block'}),
    html.Div([
        html.Div(id='votos-container'),
        dcc.Graph(id='grafico-votos')
    ], style={'width': '80%', 'display': 'flex', 'flex-gap': '20px', 'justify-content':'center'})
])

# Define la lógica para actualizar las opciones del menú desplegable 'orden' según la selección de 'número de lista'
@app.callback(
    Output('orden-dropdown', 'options'),
    Output('orden-dropdown', 'value'),
    Input('numero-lista-dropdown', 'value')
)
def update_orden_dropdown(numero_lista):
    if numero_lista is None:
        return [], None
    else:
        opciones_orden = [{'label': str(orden), 'value': orden} for orden in df[df['NRO_LISTA'] == numero_lista]['ORDEN'].unique()]
        return opciones_orden, None

# Define la lógica para mostrar los votos según los filtros seleccionados
@app.callback(
    Output('votos-container', 'children'),
    Output('grafico-votos', 'figure'),
    Input('numero-lista-dropdown', 'value'),
    Input('orden-dropdown', 'value')
)
def update_votos(numero_lista, orden):
    if numero_lista is None or orden is None:
        return '', go.Figure()

    votos = df[(df['NRO_LISTA'] == numero_lista) & (df['ORDEN'] == orden)].groupby('CODDEPARTAMENTO')['VOTOS'].sum()

    # Gráfico de barras
    fig = go.Figure(
        data=[go.Bar(x=votos.index, y=votos)],
        layout=go.Layout(title='Total de votos por departamento')
    )

    return generate_votos_table(votos), fig

# Función auxiliar para generar la tabla de votos
def generate_votos_table(votos):
    table_rows = [
        html.Tr([
            html.Th('Departamento'),
            html.Th('Votos')
        ])
    ]

    for departamento, voto in votos.items():
        table_rows.append(html.Tr([
            html.Td(departamento),
            html.Td(voto)
        ]))

    return html.Table(table_rows)

# Ejecuta la aplicación
if __name__ == '__main__':
    app.run_server(debug=False)